if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories(categories_col)
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int({{categories_col}}, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories(categories_col)
all_categories
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
all_categories
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string({{categories_str}}), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
all_categories
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int(categories_col, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
all_categories
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int({{categories_col}}, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
library(tidyverse)
df <- tibble(Prénom=c("Marine", "Jeanne", "Elliot"), Langages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df
elements_to_vector <- function(my_string, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
elements_of_entry <-
my_string |>
str_split_1(sep)
if(remove_whitespaces){elements_of_entry <- elements_of_entry |> str_trim()}
if(unique){elements_of_entry <- elements_of_entry |> unique()}
elements_of_entry
}
df |> filter(Prénom=="Paul") |> select(Langages)  |> pull() |>  elements_to_vector()
df |> filter(Prénom=="Paul") |> select(Langages)  |> pull() |>  elements_to_vector()
elements_to_vector <- function(my_string, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
elements_of_entry <-
my_string |>
str_split_1(sep)
if(remove_whitespaces){elements_of_entry <- elements_of_entry |> str_trim()}
if(unique){elements_of_entry <- elements_of_entry |> unique()}
elements_of_entry
}
df |> filter(Prénom=="Paul") |> select(Langages)  |> pull() |>  elements_to_vector()
gather_elements <- function(df, col_name, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
All_elements <-
df |>
summarize(All_elements = paste({{ col_name }}, collapse = sep)) |>
pull() |>
elements_to_vector(sep, remove_whitespaces, unique)
All_elements
}
df |> gather_elements(Langages)
df |> gather_elements(Langages)
new_col_names <-
df |>
gather_elements(Langages)
sep = ","
my_func <- function (Langages, col_name){
if_else(col_name %in% elements_to_vector(Langages), 1, 0)
}
for (col_name in new_col_names) {
df <- df |>
mutate(!!col_name := (map2_int(Langages, col_name, my_func)))
}
df |> select(!c(Langages))
encodeAsBinary <- function(){}
encodeAsBinary(df, Langages,
keep_init_col=FALSE)
library(tidyverse)
df <- tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df
find_categories_in_string <- function(my_string, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
categories <-
my_string |>
str_split_1(sep)
if(remove_whitespaces){categories <- categories |> str_trim()}
if(unique){categories <- categories |> unique()}
categories
}
df |> filter(First_name=="Elliot") |> select(Programming_languages)  |> pull() |>  find_categories_in_string()
# Trouve toutes les catégories présentent dans la colonne du datafram
find_categories <- function(df, categories_col, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
all_categories <-
df |>
summarize(all_categories = paste({{ categories_col }}, collapse = sep)) |>
pull() |>
find_categories_in_string(sep, remove_whitespaces, unique)
all_categories
}
df |> find_categories(Programming_languages)
# Trouve toutes les catégories présentent dans la colonne du datafram
find_categories <- function(df, categories_col, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
all_categories <-
df |>
summarize(all_categories = paste({{ categories_col }}, collapse = sep)) |>
pull() |>
find_categories_in_string(sep, remove_whitespaces, unique)
all_categories
}
df |> find_categories(Programming_languages)
# Trouve toutes les catégories présentent dans la colonne du datafram
find_categories <- function(df, categories_col, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
all_categories <-
df |>
summarize(all_categories = paste({{ categories_col }}, collapse = sep)) |>
pull() |>
find_categories_in_string(sep, remove_whitespaces, unique)
all_categories
}
df |> find_categories(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
all_categories
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int(categories_col, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(1, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
df <- df |>
mutate(!!category := map2_int(categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(1, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
df <- df |>
mutate(C:= map2_int(categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(1, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
df <- df |>
mutate(C:= map2_int(categories_col, "C", category_match_indicator))
}
df <- encodeAsBinary(df, Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(1, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(1, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
cat(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
cat(!!categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
categories_col <- rlang::enquo(categories_col)
all_categories <- df |> find_categories({{categories_col}})
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int(!!categories_col, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
categories_col <- enquo(categories_col)
all_categories <- df |> find_categories({{categories_col}})
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int(!!categories_col, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
categories_col <- enquo(categories_col)
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int(!!categories_col, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
df
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
return(df)
}
df <- df |> encodeAsBinary(Programming_languages)
df
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
return(df)
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories = c("A", "B", "C")
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
df
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
df
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
enquo_categories_col <- enquo(categories_col)
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int(!!enquo_categories_col, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!categories_col, "C", category_match_indicator))
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
df
}
df |> encodeAsBinary(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(TRUE, 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
enquo_categories_col <- enquo(categories_col)
df <- df |>
mutate(C:= map2_int(!!enquo_categories_col, "C", category_match_indicator))
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
df
}
df |> encodeAsBinary(Programming_languages)
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- c("A", "B", "C")
categories_col_quo <- enquo(categories_col)  # Capturer l'expression quasiquotée
df <- df |>
mutate(
!!quo_name(categories_col_quo) := map2_int(!!categories_col_quo, "C", category_match_indicator)
)
if (!keep_categories_col) {
df <- df |> select(-!!categories_col_quo)
}
return(df)
}
df |> encodeAsBinary(Programming_languages)
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!as_name(enexpr(category)) := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
return(df)
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!as_name(enexpr(category)) := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
return(df)
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
df
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
return(df)
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
df
