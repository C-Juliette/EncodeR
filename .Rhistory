for (category in all_categories) {
df <- df |>
mutate(
!!as_name(enexpr(category)) := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
return(df)
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!as_name(enexpr(category)) := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
return(df)
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
df
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
return(df)
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
df
use_r("find_categories_in_string ")
use_r("find_categories_in_string")
use_testthat()
use_test()
use_test("ind_categories_in_string")
use_test("find_categories_in_string")
document()
load_all()
check()
check()
check()
use_r("find_categories")
use_test("find_categories")
use_r("category_match_indicator")
use_test("category_match_indicator")
library(tidyverse)
df <- tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df
find_categories_in_string <- function(my_string, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
categories <-
my_string |>
str_split_1(sep)
if(remove_whitespaces){categories <- categories |> str_trim()}
if(unique){categories <- categories |> unique()}
categories
}
df |> filter(First_name=="Elliot") |> select(Programming_languages)  |> pull() |>  find_categories_in_string()
# Trouve toutes les catégories présentent dans la colonne du datafram
find_categories <- function(df, categories_col, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
all_categories <-
df |>
summarize(all_categories = paste({{ categories_col }}, collapse = sep)) |>
pull() |>
find_categories_in_string(sep, remove_whitespaces, unique)
all_categories
}
df |> find_categories(Programming_languages)
category_match_indicator <- function (categories_str, category){
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces=TRUE, unique=TRUE, keep_categories_col=FALSE){
all_categories <- df |> find_categories({{categories_col}})
enquo_categories_col <- enquo(categories_col)
for (category in all_categories) {
df <- df |>
mutate(!!category := map2_int(!!enquo_categories_col, category, category_match_indicator))
}
if(!keep_categories_col){df <- df |> select(!c(categories_col))}
}
df |> encodeAsBinary(Programming_languages)
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
return(df)
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
df
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
df
}
df <- encodeAsBinary(df, Programming_languages)
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
df
}
df <- encodeAsBinary(df, Programming_languages)
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
df
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
df <- encodeAsBinary(df, Programming_languages)
df
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
df
}
df <- tibble(
First_name = c("Marina", "Jane", "Elliot"),
Programming_languages = c("C, Scala", "C, C++, R, Python", "C++, Python")
)
encodeAsBinary(df, Programming_languages)
library(dplyr)
library(purrr)
library(rlang)
category_match_indicator <- function(categories_str, category) {
if_else(category %in% find_categories_in_string(categories_str), 1, 0)
}
encodeAsBinary <- function(df, categories_col, sep = ",", remove_whitespaces = TRUE, unique = TRUE, keep_categories_col = FALSE) {
all_categories <- df |> find_categories(!!enquo(categories_col))
for (category in all_categories) {
df <- df |>
mutate(
!!category := map2_int(!!enquo(categories_col), category, category_match_indicator)
)
}
if (!keep_categories_col) {
df <- df |> select(-!!enquo(categories_col))
}
df
}
encodeAsBinary(df, Programming_languages)
use_r("encodeAsBinary")
use_test("encodeAsBinary")
use_package("dplyr")
use_package("rlang")
use_package("purrr")
test()
test()
load_all()
test()
document()
rm(list = c("find_categories_in_string"))
load_all()
test()
test()
source("~/Documents/encodeR/tests/testthat/test-find_categories_in_string.R", echo=TRUE)
test()
test()
use_package("tibble")
est()
test()
test()
test()
load_all()
df |>  find_categories(Programming_langages)
df <- tibble:tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
fin_categories(tibble::tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python")))
find_categories(tibble::tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python")))
find_categories(tibble::tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python")), Progamming_languages)
find_categories(tibble::tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python")), "Progamming_languages)
""
)
find_categories(tibble::tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python")), "Progamming_languages")
find_categories(tibble::tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python")), Progamming_languages)
# Trouve toutes les catégories présentent dans la colonne du datafram
find_categories <- function(df, categories_col, sep = "," , remove_whitespaces = TRUE, unique = TRUE){
all_categories <-
df |>
summarize(all_categories = paste({{ categories_col }}, collapse = sep)) |>
pull() |>
find_categories_in_string(sep, remove_whitespaces, unique)
all_categories
}
df |> find_categories(Programming_languages)
load_all()
df |> find_categories(Programming_languages)
load_all()
df |> find_categories(Programming_languages)
test()
test()
source("~/Documents/encodeR/tests/testthat/test-find_categories.R", echo=TRUE)
test()
test()
df <- tibble:tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala", "C, C++, R, Python", "C++, Python"))
df <- tibble:tibble(First_name=c("Marina", "Jane", "Elliot"), Programming_languages=c("C, Scala", "C, C++, R, Python", "C++, Python"))
test()
test()
test()
test()
test()
test()
test()
test()
test()
source("~/Documents/encodeR/tests/testthat/test-find_categories.R", echo=TRUE)
source("~/Documents/encodeR/tests/testthat/test-find_categories.R", echo=TRUE)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
install.packages("covr")
usethis::use_github_action("test-coverage")
report()
test()
load_all()
document()
check()
rm(list = c("category_match_indicator", "find_categories"))
test()
load_all()
load_all()
check()
use_package("tibble")
build_readme()
check()
check()
check()
check()
check()
check()
build_readme()
devtools::install_github("C-Juliette/encodeR")
library("encodeR")
help("encode_as_binary")
help("encode_as_binary")
help("R/category_match_indicator.R")
help("category_match_indicator.R")
help("category_match_indicator")
test()
test()
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
df |> encode_as_binary(Programming_languages)
check()
check()
check()
check()
check()
check()
❯ checking R code for possible problems ... NOTE
usethis::use_import_from("rlang", ":=")
check()
check()
rlang::last_trace()
check()
rlang::last_trace()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
actual <- df |> encode_as_binary(Programming_languages)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
actual <- df |> encode_as_binary(Programming_languages)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
actual <- df |> encode_as_binary(Programming_languages)
load_all()
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
actual <- df |> encode_as_binary(Programming_languages)
?lifecycle::verbosity
test()
test()
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
df |> encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
df
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |> encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |> encode_as_binary(Programming_languages)
test()
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
df |> find_categories(rlang::enquo(categories_col))
load_all()
df |> find_categories(rlang::enquo(categories_col))
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala", "C, C++, R, Python", "C++, Python"))
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
test()
df |> encode_as_binary(Programming_languages)
load_all()
df |> encode_as_binary(Programming_languages)
test()
df |> encode_as_binary(Programming_languages)
test()
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
`C++`=c(0, 1, 1),
R=c(0, 1, 0),
Python=c(0, 1, 1))
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
C++=c(0, 1, 1),
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
C++=c(0, 1, 1),
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
`C++`=c(0, 1, 1),
R=c(0, 1, 0),
Python=c(0, 1, 1))
df |> encode_as_binary(Programming_languages)
test()
test()
actual <- df |> encode_as_binary(Programming_languages)
actual
actual$names
names(actual)
