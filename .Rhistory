test()
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
`C++`=c(0, 1, 1),
R=c(0, 1, 0),
Python=c(0, 1, 1))
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
C++=c(0, 1, 1),
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
C++=c(0, 1, 1),
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1, 1, 0),
Scala=c(1, 0, 0),
`C++`=c(0, 1, 1),
R=c(0, 1, 0),
Python=c(0, 1, 1))
df |> encode_as_binary(Programming_languages)
test()
test()
actual <- df |> encode_as_binary(Programming_languages)
actual
actual$names
names(actual)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
rlang::last_trace()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
c(1, 2)
load_all()
c(1, 2)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
library(dplyr)
rename_with(
iris,
~ paste0("prefix_", .x, recycle0 = TRUE),
starts_with("nonexistent")
)
rename_with(
iris,
~ paste0("prefix_", .x, recycle0 = TRUE),
starts_with("nonexistent")
) |> head(n = 3)
iris |> head(n = 3)
load_all()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, Ci, R, Python", "C++, Python"))
df |>  encode_as_binary(Programming_languages)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, Ci, R, Python", "Ci, Python"))
df |>  encode_as_binary(Programming_languages)
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, Ci, R, Python", "C#, Python"))
df |>  encode_as_binary(Programming_languages)
load_all()
check()
df |> encode_as_binary(Programming_languages)
tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1L, 1L, 0L),
Scala=c(1L, 0L, 0L),
`C++`=c(0L, 1L, 1L),
R=c(0L, 1L, 0L),
Python=c(0L, 1L, 1L))
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
df |> encode_as_binary(Programming_languages)
check()
test()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
actual <- df |> encode_as_binary(Programming_languages, sep=";")
actual
load_all()
test()
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", "C++; Python"))
actual <- df |> encode_as_binary(Programming_languages, sep=";")
actual
test_that("8 - Category match with trailing space", {
actual <- category_match_indicator("C ; R", "C")
expected <- 1
expect_equal(actual, expected)
})
load_all()
test_that("8 - Category match with trailing space", {
actual <- category_match_indicator("C ; R", "C")
expected <- 1
expect_equal(actual, expected)
})
test_that("8 - Category match with trailing space", {
actual <- category_match_indicator("C ; R", "C", sep=";")
expected <- 1
expect_equal(actual, expected)
})
load_all()
test()
load_all()
test()
check()
check()
load_all()
document()
test()
test()
check()
document()
use_readme_rmd()
use_readme_md()
build_readme()
test_that("13 - Test with NA", {
actual <- category_match_indicator(NA, "low")
expected <- 0
expect_equal(actual, expected)
})
isNA("")
is.na("")
load_all()
load_all()
load_all()
test_that("13 - Test with NA", {
actual <- category_match_indicator(NA, "low")
expected <- 0
expect_equal(actual, expected)
})
test_that("13 - Test with NA", {
actual <- category_match_indicator(NA, "low")
expected <- NA
expect_equal(actual, expected)
})
test_that("14 - Test with NA", {
actual <- category_match_indicator(NA, NA)
expected <- NA
expect_equal(actual, expected)
})
test_that("14 - Test with NA", {
actual <- category_match_indicator("Blue, Green, Yellow", NA)
expected <- NA
expect_equal(actual, expected)
})
test_that("14 - Test with NA", {
actual <- category_match_indicator("Blue, Green, Yellow", NA)
expected <- 0
expect_equal(actual, expected)
})
test_that("4 - Test with NA", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala", "C, C++, R, Python", NA))
actual <- df |>  find_categories(Programming_languages)
expected <- c("C", "Scala", "C++", "R", "Python")
expect_equal(actual, expected)
})
load_all()
load_all()
test_that("4 - Test with NA", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala", "C, C++, R, Python", NA))
actual <- df |>  find_categories(Programming_languages)
expected <- c("C", "Scala", "C++", "R", "Python")
expect_equal(actual, expected)
})
load_all()
test_that("4 - Test with NA", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala", "C, C++, R, Python", NA))
actual <- df |>  find_categories(Programming_languages)
expected <- c("C", "Scala", "C++", "R", "Python")
expect_equal(actual, expected)
})
load_all()
test_that("3 - Test with NA", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", NA))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1L, 1L, NA),
Scala=c(1L, 0L, NA),
`C++`=c(0L, 1L, NA),
R=c(0L, 1L, NA),
Python=c(0L, 1L, NA))
expect_equal(actual, expected)
})
test_that("4 - Test with empty string", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1L, 1L, 0L),
Scala=c(1L, 0L, 0L),
`C++`=c(0L, 1L, 0L),
R=c(0L, 1L, 0L),
Python=c(0L, 1L, 0L))
expect_equal(actual, expected)
})
test_that("6 - Test with NA", {
actual <- find_categories_in_string(NA)
expected <- NA
expect_equal(actual, expected)
})
test_that("8 - Test with NA", {
actual <- find_categories_in_string("")
expected <- NA
expect_equal(actual, expected)
})
test_that("9 - Test with unique value", {
actual <- find_categories_in_string("C")
expected <- c("C")
expect_equal(actual, expected)
})
test_that("8 - Test with empty string", {
actual <- find_categories_in_string("")
expected <- ""
expect_equal(actual, expected)
})
load_all()
test()
load_all()
test()
load_all()
test()
load_all()
test()
load_all()
test()
test_that("4 - Test with empty string", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala", "C, C++, R, Python", ""))
actual <- df |>  find_categories(Programming_languages)
expected <- c("C", "Scala", "C++", "R", "Python")
expect_equal(actual, expected)
})
test_that("4 - Test with empty string", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala", "C, C++, R, Python", ""))
actual <- df |>  find_categories(Programming_languages)
expected <- c("C", "Scala", "C++", "R", "Python")
expect_equal(actual, expected)
})
load_all()
test()
use_package("glue")
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C, Scala","C, C++, R, Python", "C++, Python"))
df |>  encode_as_booleans(Programming_languages)
load_all()
df |>  encode_as_booleans(Programming_languages)
load_all()
df |>  encode_as_booleans(Programming_languages)
load_all()
df |>  encode_as_booleans(Programming_languages)
load_all()
df |>  encode_as_booleans(Programming_languages)
if(df |>  encode_as_booleans(Programming_languages)){ 1}
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
test_that("4 - Test with empty string as an entry", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1L, 1L, 0L),
Scala=c(1L, 0L, 0L),
`C++`=c(0L, 1L, 0L),
R=c(0L, 1L, 0L),
Python=c(0L, 1L, 0L))
expect_equal(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
test_that("4 - Test with empty string as an entry", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("C; Scala", "C; C++; R; Python", ""))
actual <- df |> encode_as_booleans(Programming_languages, sep=";")
expected <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
C=c(1L, 1L, 0L),
Scala=c(1L, 0L, 0L),
`C++`=c(0L, 1L, 0L),
R=c(0L, 1L, 0L),
Python=c(0L, 1L, 0L))
expect_equal(actual, expected)
})
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
load_all()
test_that("5 - Test with empty column (empty string)", {
df <- tibble::tibble(First_name=c("Marina", "Jane", "Elliot"),
Programming_languages=c("", "", ""))
actual <- df |> encode_as_booleans(Programming_languages)
expected <- "Programming_languages only contains empty strings"
expect_warning(actual, expected)
})
